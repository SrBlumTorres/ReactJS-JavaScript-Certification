"use strict";

// Bucles

    //* El bucle "for..." en JavaScript es una estructura de control fundamental que te permite ejecutar un bloque de c√≥digo un n√∫mero espec√≠fico de veces. Es especialmente √∫til cuando conoces de antemano cu√°ntas veces necesitas iterar.

        // for (inicializaci√≥n; condici√≥n; actualizaci√≥n) {
            // C√≥digo a ejecutar en cada iteraci√≥n
        // }

        //¬∑ Inicializaci√≥n: Aqu√≠ se inicializa una variable de control (por ejemplo, let i = 0). Este paso se ejecuta una sola vez al comienzo del bucle.

        //¬∑ Condici√≥n: Esta expresi√≥n se eval√∫a antes de cada iteraci√≥n. Si es verdadera (true), se ejecuta el bloque de c√≥digo dentro del bucle. Si es falsa (false), el bucle se detiene.

        //¬∑ Actualizaci√≥n: Esta expresi√≥n se ejecuta al final de cada iteraci√≥n del bucle. Generalmente, se utiliza para incrementar o modificar la variable de control (por ejemplo, i++).

        //¬∑ Usa break para salir del bucle anticipadamente y continue para saltar a la siguiente iteraci√≥n.

        const items = ['Perro ', 'Gato', 'Le√≥n', 'Serpiente', '√Åguila'];

        for (let i = 0; i < items.length; i++) {
            console.log(items[i]);
        }

        // Recorrido inverso
        for (let i = items.length -1; i >= 0 ; i--) {
            if (items[i] === 'Gato') break;
            console.log(items[i]);
        }

        console.log(3);
        
    //* El bucle for...of es una estructura de control en JavaScript que se utiliza para iterar sobre elementos de colecciones iterables, como arrays, strings, objetos Map, Set y otros objetos que implementan el m√©todo [Symbol.iterator]. Es una forma sencilla y legible de acceder a cada elemento de una colecci√≥n sin necesidad de gestionar √≠ndices.

        //¬∑ elemento: es la variable que contendr√° el valor de cada elemento de la colecci√≥n en cada iteraci√≥n.
        //¬∑ iterable: es cualquier objeto que se puede iterar, como arrays, strings, Set, Map, etc.

        const emoticons = ['üëª', 'üöÄ', '‚öΩÔ∏è', 'üèéÔ∏è', 'üèÅ'];

        for (const emoticon of emoticons) {
            console.log(emoticon);
        }

        //? Ventajas del bucle for...of
            // Simplicidad:
                //¬∑ No necesitas preocuparte por los √≠ndices, lo que simplifica el c√≥digo y lo hace m√°s legible.

            // Acceso directo a elementos:
                //¬∑ Accedes directamente al valor de cada elemento, evitando la necesidad de utilizar array[index].

            // Compatible con colecciones no indexadas:
                //¬∑ Funciona con cualquier objeto iterable, no solo arrays. Esto incluye strings, Set, y Map.

        const string = 'Lista de elementos';
        for (const letter of string) {
            console.log(letter); //
        }

    //! CONSIDERACIONES
        //¬∑ No se puede usar con objetos regulares: El bucle for...of no funcionar√° directamente en objetos que no son iterables. Para recorrer las propiedades de un objeto, debes usar for...in.
        //¬∑ No tiene acceso al √≠ndice: Si necesitas el √≠ndice de cada elemento, considera usar un bucle for tradicional o el m√©todo forEach().



    //* for... in
        // El bucle for...in es una estructura en JavaScript que permite recorrer las propiedades de los objetos y los √≠ndices de los arrays. A diferencia de for...of, que itera sobre los valores de un iterable, for...in itera sobre las claves (o √≠ndices en el caso de un array) de un objeto.

        // Ejemplo de uso con objeto
        const libro = {
            titulo: '1984',
            autor: 'George Orwell',
            a√±o: 1949
        };
          
        for (const clave in libro) {
            console.log(`Propiedad: ${clave}, Valor: ${libro[clave]}`);
        }
        
        // Ejemplo con array 
        // Tambi√©n puedes usar for...in para recorrer un array, pero ten en cuenta que en este caso iterar√° sobre los'√≠ndices' y no sobre los valores.

        const frutas = ['manzana', 'pera', 'naranja'];

        for (const indice in frutas) {
            console.log(frutas[indice]);
        }

        //! CONSIDERACIONES
            // Consideraciones y consejos de uso
                //¬∑ Solo recorre claves o √≠ndices: for...in es ideal cuando necesitas trabajar con las claves de un objeto. Si necesitas los valores de un array o iterable, es mejor utilizar for...of.
            
                //¬∑ No recomendado para arrays en muchos casos: Aunque for...in funciona con arrays, no es la mejor opci√≥n en la mayor√≠a de los casos. Esto se debe a que:
                    //¬∑ for...in tambi√©n puede incluir propiedades heredadas en el prototipo del array, lo que puede provocar resultados inesperados.
                    //¬∑ Si se han a√±adido propiedades no num√©ricas al array (por ejemplo, frutas.nombre = "Frutas tropicales"), el for...in tambi√©n las recorrer√°, lo cual no sucede con un for...of o un for convencional.
                //¬∑ Mejor para objetos: for...in es ideal para recorrer objetos literales en los que quieres acceder a las claves y valores.



    //* while...
        // Repite un bloque de c√≥digo mientras una condici√≥n especificada sea verdadera. Es √∫til cuando no sabemos de antemano cu√°ntas veces se ejecutar√° el bucle, pero sabemos que debemos continuar mientras se cumpla cierta condici√≥n.

        // Flujo
            //¬∑ Verifica la condici√≥n.
            //¬∑ Si es true, ejecuta el bloque de c√≥digo.
            //¬∑ Despu√©s de cada ejecuci√≥n, vuelve al paso 1 para verificar la condici√≥n nuevamente.

        // Ej
        let contador = 0;
        let x = 0;

        while (contador < 3) {
            contador++;
            console.log(`Contador => ${contador}`);

            x += contador;
            console.log(`Contador por asignaci√≥n => ${x}`)
        }

        // contador
        //! CONSIDERACIONES
            //¬∑ Solo lo usamos si NO SABEMOS CUANTAS VUELTAS VA A DAR

// 5. Bucle for...of y for...in:
// ¬∑ Considera utilizar for...of para iterar sobre arrays y objetos iterables
// ¬∑ for...in para recorrer propiedades de objetos. for...of es m√°s moderno y m√°s seguro para arrays.


// Transformar a md, es una tabla! 
// 5. Comparaci√≥n con otros bucles
// Tipo de bucle	Ideal para	Itera sobre	Notas
// for...of	Arrays e iterables	Valores	No se usa para objetos; requiere valores iterables.
// for...in	Objetos y arrays con √≠ndices espec√≠ficos	Claves (o √≠ndices en arrays)	Puede recorrer propiedades heredadas en arrays.
// for convencional	Arrays y estructuras controladas	√çndices controlados	Ideal para mayor control sobre la iteraci√≥n.

// let b = prompt();

// while (b >= 50 || b <= 100){
//     b;
// }
