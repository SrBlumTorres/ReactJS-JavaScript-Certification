*, *::before, *::after {
  box-sizing: border-box;
}

body {
  font-family: 'Arial', sans-serif;
}


details {
  margin-block: 1rem;
}

summary {
  font-size: 1.3rem;
  font-weight: bold;
  margin-bottom: 1rem;
}



.container {
  width: min(90%, 800px);
  margin: 2rem auto;
  padding: 0.5rem;
}


.padre {
  height: 200px;
  background-color: indigo;
  border: 2px solid black;
  padding: 1rem;
}

.caja {
  border: 2px solid white;
  background-color: rgba(255, 217, 0, 0.616);
  padding: 0.5rem;
}


/**? En CSS, las propiedades position (relative, absolute, fixed y sticky) determinan cómo se posicionan los elementos en la página, es decir, cómo se comportan en relación con otros elementos y el flujo general del documento. Vamos a verlas una por una: */

/**! 
  relative: Desplaza al elemento en relación con su posición normal, pero no sale del flujo del documento.
  absolute: Posiciona al elemento en relación a su contenedor posicionado más cercano y lo saca del flujo.
  fixed: Fija el elemento en relación al viewport, independientemente del scroll.
  sticky: Comienza siendo relativo, pero cuando se alcanza un cierto punto, se "pega" y se comporta como fixed. 
*/

/**! Mirar cada una de las características principales de cada uno, aclara muchas cosas */

/** RELATIVE */

/*! Cuando pongo position relative NO PASA NADA DE ENTRADA */
/** Pero se activan 5 nuevas propiedades que antes no podía usar */

/* Básica */
.hijo-relative {
  position: relative;

  /* top: 20px; */
  left: -100px;
  /* right: 20px; */
  /* bottom: 20px; */

  z-index: 2;

}

.hijo-relative-2 {
  margin-top: -10px;
  position: relative;

  z-index: 2;
}


/** Absolute */
/**! Al trabajar con Absolute reocordemos que el "Padre" si o si debe tener un tipo de position*/
/*! Por defecto una caja con absolute pierde el ANCHO AUTOMÁTICO del 100% */
/*! Por defecto una caja con absolute SE SALE DEL FLUJO DEL RESTO DE CAJAS */
/*! Las 4 propiedades de posición van a coger como referencia el ASCENDIENTE MÁS CERCANO QUE TENGA UN POSITION PUESTO */

.padre-2 {
  position: relative;
}

.hijo-absolute-1 {
  position: absolute;

  /* top: 100%; */
  /* left: 100%; */
  right: 0px;
  bottom: 0px;

  /* z-index: 2; */
}

.hijo-absolute-2 {
  position: absolute;
  width: 150px;
  height: 100px;

  /* calc() 50% se refiere al 50% del ancho del contenedor (o del viewport, si el contenedor no está posicionado). */
  left: calc(50% - 75px);
  /* Al hacer 50% - 50px, se asegura que el elemento se coloque exactamente en el centro vertical. De nuevo, se resta la mitad de su altura (100px / 2 = 50px) para centrarlo. */
  top: calc(50% - 50px);
}

.hijo-absolute-4 {
  width: 15%;
  height: 25%;
  background-color: crimson;

  position: absolute;
  left: 50%;
  top: 50%;

  /**? La propiedad translate en CSS se utiliza para mover (trasladar) un elemento en el espacio, modificando su posición en los ejes "X" y "Y". Cuando ves translate(-50%, -50%), se está utilizando para centrar un elemento de manera precisa, incluso cuando su tamaño es dinámico (es decir, desconocido o variable). */
  translate: -50% -50%;
}


.btn-absolute {
  position: relative;

  margin-block: 1rem;
  background-color: royalblue;
  color: white;
  padding: 0.3rem 0.7rem;
  border: none;
}

.btn-absolute div {

  background-color: crimson;
  width: 20px;
  height: 20px;
  border-radius: 50%;
  display: flex;
  justify-content: center;
  align-items: center;

 
  position: absolute;
  top: 0;
  right: 0;
  translate: 50% -50%;
}

/** Fixed */

/**! Común en navs*/
/*! Por defecto una caja con fixed pierde el ANCHO AUTOMÁTICO del 100% */
/*! Por defecto una caja con fixed SE SALE DEL FLUJO DEL RESTO DE CAJAS */
/*! Las 4 propiedades de posición van a coger como referencia SIEMPRE A LA VENTANA DEL NAVEGADOR */

.hijo-fixed-1 {
  position: fixed;

  /* top: 100%; */
  left: 0%;
  /* right: 0px; */
  top: 50%;
  translate: 0 -50%;

  /* z-index: 2; */

}


/** Sticky */

.hijo-sticky-1 {
  position: sticky;


  top: 0px;
}



/** Ejemplo de una galeria con efecto hover absolute */


img {
  max-width: 100%;
  display: block;
}

.gallery {
  display: flex;
  gap: 1rem;
  flex-wrap: wrap;
}


.gallery-box {
  position: relative;
  /* border: 3px solid crimson; */
  width: max(30%, 150px);
  overflow: hidden;  
}

/* ----------- Primera caja -----------*/
.gallery-box .text {
  position: absolute;
  border: 2px solid white;
  top: 50%;
  left: 50%;
  translate: -50% 100px;
  color: white;
  font-size: 1.2rem;
  /* width: min-content; */
  /* width: max-content; */
  width: 100%;
  text-align: center;
  margin: 0;

  transition: translate 1s ease;
  z-index: 10;
}



.gallery-box .overlay {
  width: 50px;
  height: 50px;
  background-color: rgb(0 0 0 / 0.4);
  opacity: 0;

  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;

  transition: opacity 1s ease;
}

.gallery-box:hover > .text {
  translate: -50% -50%;
}

.gallery-box:hover > .overlay {
  opacity: 1;
}


/** -------- Gallery box cool  ----------*/
.gallery-box-cool {
  position: relative;
  /* border: 3px solid crimson; */
  width: max(30%, 150px);
  overflow: hidden;
}

.gallery-box-cool::after {
  content: attr(data-text);
  position: absolute;
  border: 2px solid white;
  top: 50%;
  left: 50%;
  translate: -50% 100px;
  color: white;
  font-size: 1.2rem;
  /* width: min-content; */
  width: max-content;
  /* width: 100%; */
  padding: 0.3rem;
  text-align: center;
  margin: 0;

  transition: translate 1s ease;
  z-index: 10;
}

.gallery-box-cool::before {
  content: '';
  display: block;
  width: 100%;
  height: 100%;
  background-color: rgb(0, 0, 0, 0.4);
  background-color: rgb(0 0 0 / 0.4);
  position: absolute;
  top: 0;
  left: 0;
  opacity: 0;
  transition: opacity 1s ease;

}


.gallery-box-cool:hover::after {
  translate: -50% -50%;
}

.gallery-box-cool:hover::before {
  opacity: 1;
}
